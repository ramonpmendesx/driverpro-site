import{_ as i,c as s,o as e,ah as t}from"./chunks/framework.C0oJDTnj.js";const d=JSON.parse('{"title":"Multi-Agent System","description":"","frontmatter":{},"headers":[],"relativePath":"reference/multi-agent.md","filePath":"reference/multi-agent.md"}'),n={name:"reference/multi-agent.md"};function l(r,a,h,o,p,c){return e(),s("div",null,a[0]||(a[0]=[t(`<h1 id="multi-agent-system" tabindex="-1">Multi-Agent System <a class="header-anchor" href="#multi-agent-system" aria-label="Permalink to &quot;Multi-Agent System&quot;">​</a></h1><p>MetaGPT&#39;s multi-agent system simulates a software development team where each agent has specialized roles and responsibilities.</p><h2 id="agent-types" tabindex="-1">Agent Types <a class="header-anchor" href="#agent-types" aria-label="Permalink to &quot;Agent Types&quot;">​</a></h2><h3 id="product-manager-pm" tabindex="-1">Product Manager (PM) <a class="header-anchor" href="#product-manager-pm" aria-label="Permalink to &quot;Product Manager (PM)&quot;">​</a></h3><ul><li>Analyzes requirements</li><li>Creates user stories</li><li>Defines acceptance criteria</li><li>Prioritizes features</li></ul><h3 id="architect" tabindex="-1">Architect <a class="header-anchor" href="#architect" aria-label="Permalink to &quot;Architect&quot;">​</a></h3><ul><li>Designs system architecture</li><li>Makes technology choices</li><li>Ensures scalability</li><li>Maintains technical standards</li></ul><h3 id="project-manager" tabindex="-1">Project Manager <a class="header-anchor" href="#project-manager" aria-label="Permalink to &quot;Project Manager&quot;">​</a></h3><ul><li>Creates task breakdown</li><li>Manages dependencies</li><li>Tracks progress</li><li>Coordinates team efforts</li></ul><h3 id="engineer" tabindex="-1">Engineer <a class="header-anchor" href="#engineer" aria-label="Permalink to &quot;Engineer&quot;">​</a></h3><ul><li>Implements features</li><li>Writes clean code</li><li>Follows best practices</li><li>Performs code reviews</li></ul><h3 id="quality-assurance-qa" tabindex="-1">Quality Assurance (QA) <a class="header-anchor" href="#quality-assurance-qa" aria-label="Permalink to &quot;Quality Assurance (QA)&quot;">​</a></h3><ul><li>Writes test cases</li><li>Performs testing</li><li>Ensures code quality</li><li>Reports issues</li></ul><h2 id="agent-interaction" tabindex="-1">Agent Interaction <a class="header-anchor" href="#agent-interaction" aria-label="Permalink to &quot;Agent Interaction&quot;">​</a></h2><h3 id="communication-protocol" tabindex="-1">Communication Protocol <a class="header-anchor" href="#communication-protocol" aria-label="Permalink to &quot;Communication Protocol&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequenceDiagram</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    User-&gt;&gt;PM: Project Requirements</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PM-&gt;&gt;Architect: User Stories</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Architect-&gt;&gt;ProjectManager: Technical Design</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ProjectManager-&gt;&gt;Engineer: Task Assignment</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Engineer-&gt;&gt;QA: Implementation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    QA-&gt;&gt;ProjectManager: Test Results</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ProjectManager-&gt;&gt;PM: Delivery Status</span></span></code></pre></div><h2 id="customization" tabindex="-1">Customization <a class="header-anchor" href="#customization" aria-label="Permalink to &quot;Customization&quot;">​</a></h2><h3 id="creating-custom-roles" tabindex="-1">Creating Custom Roles <a class="header-anchor" href="#creating-custom-roles" aria-label="Permalink to &quot;Creating Custom Roles&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> metagpt.roles </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Role</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomRole</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CustomRole&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.profile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Specialized role profile&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, context):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Role-specific logic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span></code></pre></div><h3 id="role-configuration" tabindex="-1">Role Configuration <a class="header-anchor" href="#role-configuration" aria-label="Permalink to &quot;Role Configuration&quot;">​</a></h3><ul><li>Define custom behaviors</li><li>Add specialized knowledge</li><li>Modify interaction patterns</li><li>Extend capabilities</li></ul>`,21)]))}const g=i(n,[["render",l]]);export{d as __pageData,g as default};
