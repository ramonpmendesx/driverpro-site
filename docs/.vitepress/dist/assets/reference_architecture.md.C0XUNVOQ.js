import{_ as e,c as s,o as i,ah as n}from"./chunks/framework.C0oJDTnj.js";const E=JSON.parse('{"title":"Architecture Overview","description":"","frontmatter":{},"headers":[],"relativePath":"reference/architecture.md","filePath":"reference/architecture.md"}'),t={name:"reference/architecture.md"};function l(r,a,o,c,h,p){return i(),s("div",null,a[0]||(a[0]=[n(`<h1 id="architecture-overview" tabindex="-1">Architecture Overview <a class="header-anchor" href="#architecture-overview" aria-label="Permalink to &quot;Architecture Overview&quot;">​</a></h1><p>MetaGPT&#39;s architecture is designed to simulate a software company&#39;s workflow through multi-agent collaboration.</p><h2 id="system-architecture" tabindex="-1">System Architecture <a class="header-anchor" href="#system-architecture" aria-label="Permalink to &quot;System Architecture&quot;">​</a></h2><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph TD</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A[User Input] --&gt; B[Environment]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B --&gt; C[Role Manager]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C --&gt; D[Agents]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; E[Product Manager]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; F[Architect]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; G[Project Manager]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; H[Engineer]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    D --&gt; I[QA]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    E --&gt; J[Output]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    F --&gt; J</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    G --&gt; J</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    H --&gt; J</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    I --&gt; J</span></span></code></pre></div><h2 id="core-components" tabindex="-1">Core Components <a class="header-anchor" href="#core-components" aria-label="Permalink to &quot;Core Components&quot;">​</a></h2><h3 id="environment" tabindex="-1">Environment <a class="header-anchor" href="#environment" aria-label="Permalink to &quot;Environment&quot;">​</a></h3><ul><li>Manages shared context and resources</li><li>Handles agent communication</li><li>Maintains project state</li></ul><h3 id="role-manager" tabindex="-1">Role Manager <a class="header-anchor" href="#role-manager" aria-label="Permalink to &quot;Role Manager&quot;">​</a></h3><ul><li>Assigns roles to agents</li><li>Coordinates workflows</li><li>Manages task transitions</li></ul><h3 id="agents" tabindex="-1">Agents <a class="header-anchor" href="#agents" aria-label="Permalink to &quot;Agents&quot;">​</a></h3><p>Each agent has:</p><ul><li>Specific role and responsibilities</li><li>Knowledge base and capabilities</li><li>Communication protocols</li><li>Action patterns</li></ul><h2 id="communication-flow" tabindex="-1">Communication Flow <a class="header-anchor" href="#communication-flow" aria-label="Permalink to &quot;Communication Flow&quot;">​</a></h2><ol><li>User input processed by Environment</li><li>Role Manager assigns tasks</li><li>Agents collaborate through messages</li><li>Results consolidated and validated</li><li>Final output generated</li></ol>`,14)]))}const g=e(t,[["render",l]]);export{E as __pageData,g as default};
